/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { WrappedNodeExpr, compileNgModule as compileR3NgModule, jitExpression } from '@angular/compiler';
import { flatten } from '../util';
import { angularCoreEnv } from './environment';
var EMPTY_ARRAY = [];
export function compileNgModule(type, ngModule) {
    var meta = {
        type: wrap(type),
        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
        declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
        imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        emitInline: true,
    };
    // Compute transitiveCompileScope
    var transitiveCompileScope = {
        directives: new Set(),
        pipes: new Set(),
        modules: new Set(),
    };
    function addExportsFrom(module) {
        if (!transitiveCompileScope.modules.has(module)) {
            module.ngModuleDef.exports.forEach(function (exp) {
                if (isNgModule(exp)) {
                    addExportsFrom(exp);
                }
                else if (exp.ngPipeDef) {
                    transitiveCompileScope.pipes.add(exp);
                }
                else {
                    transitiveCompileScope.directives.add(exp);
                }
            });
        }
    }
    flatten([
        (ngModule.imports || EMPTY_ARRAY), (ngModule.exports || EMPTY_ARRAY)
    ]).forEach(function (importExport) {
        var maybeModule = expandModuleWithProviders(importExport);
        if (isNgModule(maybeModule)) {
            addExportsFrom(maybeModule);
        }
    });
    flatten(ngModule.declarations || EMPTY_ARRAY).forEach(function (decl) {
        if (decl.ngPipeDef) {
            transitiveCompileScope.pipes.add(decl);
        }
        else if (decl.ngDirectiveDef) {
            transitiveCompileScope.directives.add(decl);
        }
        else if (decl.ngComponentDef) {
            transitiveCompileScope.directives.add(decl);
            patchComponentWithScope(decl, type);
        }
        else {
            // A component that has not been compiled yet because the template is being fetched
            // we need to store a reference to the module to update the selector scope after
            // the component gets compiled
            transitiveCompileScope.directives.add(decl);
            decl.ngSelectorScope = type;
        }
    });
    var def = null;
    Object.defineProperty(type, 'ngModuleDef', {
        get: function () {
            if (def === null) {
                var meta_1 = {
                    type: wrap(type),
                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
                    declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    emitInline: true,
                };
                var res = compileR3NgModule(meta_1);
                def = jitExpression(res.expression, angularCoreEnv, "ng://" + type.name + "/ngModuleDef.js");
                def.transitiveCompileScope = {
                    directives: Array.from(transitiveCompileScope.directives),
                    pipes: Array.from(transitiveCompileScope.pipes),
                };
            }
            return def;
        },
    });
}
export function patchComponentWithScope(component, module) {
    component.ngComponentDef.directiveDefs = function () {
        return module.ngModuleDef.transitiveCompileScope.directives
            .map(function (dir) { return dir.ngDirectiveDef || dir.ngComponentDef; })
            .filter(function (def) { return !!def; });
    };
    component.ngComponentDef.pipeDefs = function () {
        return module.ngModuleDef.transitiveCompileScope.pipes.map(function (pipe) { return pipe.ngPipeDef; });
    };
}
function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
        return value.ngModule;
    }
    return value;
}
function wrap(value) {
    return new WrappedNodeExpr(value);
}
function isModuleWithProviders(value) {
    return value.ngModule !== undefined;
}
function isNgModule(value) {
    return value.ngModuleDef !== undefined;
}

//# sourceMappingURL=data:application/json;base64,