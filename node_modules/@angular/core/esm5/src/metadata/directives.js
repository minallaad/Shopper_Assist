/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy } from '../change_detection/constants';
import { R3_COMPILE_COMPONENT, R3_COMPILE_DIRECTIVE } from '../ivy_switch';
import { makeDecorator, makePropDecorator } from '../util/decorators';
/**
 * Directive decorator and metadata.
 *
 *
 * @Annotation
 */
export var Directive = makeDecorator('Directive', function (dir) {
    if (dir === void 0) { dir = {}; }
    return dir;
}, undefined, undefined, function (type, meta) { return (R3_COMPILE_DIRECTIVE || (function () { }))(type, meta); });
/**
 * Component decorator and metadata.
 *
 *
 * @Annotation
 */
export var Component = makeDecorator('Component', function (c) {
    if (c === void 0) { c = {}; }
    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));
}, Directive, undefined, function (type, meta) { return (R3_COMPILE_COMPONENT || (function () { }))(type, meta); });
/**
 * Pipe decorator and metadata.
 *
 * Use the `@Pipe` annotation to declare that a given class is a pipe. A pipe
 * class must also implement {@link PipeTransform} interface.
 *
 * To use the pipe include a reference to the pipe class in
 * {@link NgModule#declarations}.
 *
 *
 * @Annotation
 */
export var Pipe = makeDecorator('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); });
/**
 * Input decorator and metadata.
 *
 *
 * @Annotation
 */
export var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * Output decorator and metadata.
 *
 *
 * @Annotation
 */
export var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * HostBinding decorator and metadata.
 *
 *
 * @Annotation
 */
export var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
/**
 * HostListener decorator and metadata.
 *
 *
 * @Annotation
 */
export var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });

//# sourceMappingURL=data:application/json;base64,